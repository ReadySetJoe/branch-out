{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","App","token","getHashParams","access_token","setAccessToken","state","loggedIn","nowPlaying","name","image","topArtists","topArtistEvents","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getMyCurrentPlaybackState","then","response","console","log","setState","item","album","images","url","catch","error","getMyTopArtists","items","map","artist","fetch","this","split","join","res","json","data","isLoaded","event","lineup","venue","city","region","datetime","className","href","onClick","getNowPlaying","src","style","width","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gPAIMA,EAAa,I,OAAIC,GAqKRC,E,YAlKb,aAAe,IAAD,sBAEZ,IACMC,GAFN,+CACoBC,gBACCC,aAHT,OAIRF,GACFH,EAAWM,eAAeH,GAE5B,EAAKI,MAAQ,CACXC,WAAUL,EACVM,WAAY,CACVC,KAAM,cACNC,MAAO,IAETC,WAAY,GACZC,gBAAiB,IAdP,E,6EA+BZ,IAHA,IACIC,EADAC,EAAa,GACVC,EAAI,uBACXC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAC3BP,EAAIE,EAAEM,KAAKL,IACjBF,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IAE1C,OAAOC,I,sCAGQ,IAAD,OACdf,EAAWwB,4BACRC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,EAAKrB,OACjB,EAAKsB,SAAS,CACZpB,WAAY,CACVC,KAAMgB,EAASI,KAAKpB,KACpBC,MAAOe,EAASI,KAAKC,MAAMC,OAAO,GAAGC,UAI5CC,OAAM,SAAAC,GACLR,QAAQC,IAAIO,GACZR,QAAQC,IAAI,EAAKrB,Y,sCAIJ,IAAD,OACdP,EAAWoC,kBAEVX,MAAK,SAACC,GACL,EAAKG,SAAS,CACZjB,WAAYc,EAASW,MAAMC,KAAI,SAAAC,GAAM,OAAIA,EAAO7B,e,2CAyChC,IAAD,OACnB8B,MAAM,wCACFC,KAAKlC,MAAMK,WAAW,GAAG8B,MAAM,KAAKC,KAAK,OACzC,mDACDlB,MAAK,SAAAmB,GAAG,OAAIA,EAAIC,UAChBpB,MACC,SAACqB,GACCnB,QAAQC,IAAIkB,GACZ,EAAKjB,SAAS,CACZkB,UAAU,EACVlC,gBAAiBiC,EAAKR,KAAI,SAAAU,GAAK,MAAI,CAACA,EAAMC,OAAO,GAAG,qBAAqBD,EAAME,MAAMxC,KAAM,KAAMsC,EAAME,MAAMC,KAAM,IAAKH,EAAME,MAAME,OAAQ,KAAMJ,EAAMK,UAAUV,eAMtK,SAACR,GACC,EAAKN,SAAS,CACZkB,UAAU,EACVZ,e,+BAOA,IAAD,OAEP,OACE,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,cAClB,uBAAGC,KAAK,0BAAR,WAEA,6BACA,6BACA,6BACA,6BAEE,4BAAQC,QAAS,kBAAM,EAAKC,kBAA5B,mBACA,6BAAMhB,KAAKlC,MAAME,WAAWC,KAA5B,KACA,6BACE,yBAAKgD,IAAKjB,KAAKlC,MAAME,WAAWE,MAAOgD,MAAO,CAACC,MAAO,c,GA/IhDC,IAAMC,WCMJC,QACW,cAA7B7C,OAAOC,SAAS6C,UAEe,UAA7B9C,OAAOC,SAAS6C,UAEhB9C,OAAOC,SAAS6C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,iB","file":"static/js/main.0e68461e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n//import {geolocated} from \"react-geolocated\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: {\n        name: 'not checked',\n        image: ''\n      },\n      topArtists: [],\n      topArtistEvents: [],\n      // coords: {\n      //   latitude,\n      //   longitude,\n      //   altitude,\n      //   accuracy,\n      //   altitudeAccuracy,\n      //   heading,\n      //   speed,\n      // }\n    }\n  }\n  \n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n        console.log(response)\n        console.log(this.state)\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            image: response.item.album.images[0].url\n          }\n        })\n    })\n    .catch(error => {\n      console.log(error)\n      console.log(this.state)      \n    })\n  }\n\n  getTopArtists() {\n    spotifyApi.getMyTopArtists()\n    // .then((response) => console.log(response))\n    .then((response) => {\n      this.setState({\n        topArtists: response.items.map(artist => artist.name)\n      })\n    })\n  }\n\n  // getMyLocation() {\n  //     if (navigator.geolocation) {\n  //         navigator.geolocation.getCurrentPosition(showPosition, showError);\n  //     } else {\n  //         var x = document.getElementById(\"location\");\n  //         x.innerHTML = \"Geolocation is not supported by this browser.\";\n  //     }\n  // }\n\n//   showPosition(position) {\n//     var x = document.getElementById(\"location\");\n//     x.innerHTML = \"Latitude: \" + position.coords.latitude + \n//     \"<br>Longitude: \" + position.coords.longitude; \n//     var latlon = position.coords.latitude + \",\" + position.coords.longitude;\n\n\n//     $.ajax({\n//       type:\"GET\",\n//       url:\"https://app.ticketmaster.com/discovery/v2/events.json?apikey=pLOeuGq2JL05uEGrZG7DuGWu6sh2OnMz&latlong=\"+latlon,\n//       async:true,\n//       dataType: \"json\",\n//       success: function(json) {\n//                   console.log(json);\n//                   var e = document.getElementById(\"events\");\n//                   e.innerHTML = json.page.totalElements + \" events found.\";\n//                   showEvents(json);\n//                   initMap(position, json);\n//                },\n//       error: function(xhr, status, err) {\n//                   console.log(err);\n//                }\n//     });\n\n// }\n\n\n  getTopArtistEvents() {\n    fetch(\"https://rest.bandsintown.com/artists/\"\n      + this.state.topArtists[1].split(' ').join('%20') \n      + '/events?app_id=6a4c5bcaef444a66f8ca08be6adb9be8')\n      .then(res => res.json())\n      .then(\n        (data) => {\n          console.log(data)\n          this.setState({\n            isLoaded: true,\n            topArtistEvents: data.map(event => [event.lineup[0],'will be playing at',event.venue.name, 'in', event.venue.city, ',', event.venue.region, 'at', event.datetime].join())\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <a href=\"/social/login/spotify/\">Spotify</a>\n\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n\n          <button onClick={() => this.getNowPlaying()}>get now playing</button>\n          <div>{this.state.nowPlaying.name}:</div>\n          <div>\n            <img src={this.state.nowPlaying.image} style={{width: 100}}></img>\n          </div>\n{/* \n          <button onClick={() => this.getTopArtists()}>get top artists</button>\n          <div>{this.state.topArtists}</div>\n\n          <button onClick={() => this.getTopArtistEvents()}> get top artist events </button>\n          <div>{this.state.topArtistEvents}</div>\n\n          <button onClick={() => this.getMyLocation()}>get user location</button>\n\n          <div></div> */}\n\n\n\n        </header>\n      </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n//\n//ReactDOM.render(\n//  <Router>\n//      <Switch>\n//        <Route path='/login/' component={Login} />\n//        <PrivateRoute path='/boards/new/' component={RecipeForm} />\n//        <PrivateRoute exact path='/' component={RecipeList} />\n//    </Switch>\n//  </Router>\n//  , document.getElementById('root')\n//);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}