{"version":3,"sources":["Player.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","backgroundStyles","backgroundImage","item","album","images","url","progressBarStyles","width","progress_ms","duration_ms","className","alt","src","name","artists","is_playing","style","spotifyApi","SpotifyWebApi","scopes","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","console","log","token","access_token","setAccessToken","App","state","top_artists","getCurrentlyPlaying","bind","getMyCurrentPlaybackState","then","data","setState","catch","error","_token","this","getMyTopArtists","response","items","map","artist","href","join","onClick","icon","faSync","getTopArtists","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc31add8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Player.css\";\nconst Player = props => {\n  const backgroundStyles = {\n    backgroundImage:`url(${props.item.album.images[0].url})`,\n  };\n  \n  const progressBarStyles = {\n    width: (props.progress_ms * 100 / props.item.duration_ms) + '%'\n  };\n  \n  return (\n    <div className=\"App\">\n      <div className=\"main-wrapper\">\n        <div className=\"now-playing__img\">\n          <img alt=\"Album art for now playing\" src={props.item.album.images[0].url} />\n        </div>\n        <div className=\"now-playing__side\">\n          <div className=\"now-playing__name\">{props.item.name}</div>\n          <div className=\"now-playing__artist\">\n            {props.item.artists[0].name}\n          </div>\n          <div className=\"now-playing__status\">\n            {props.is_playing ? \"Playing\" : \"Paused\"}\n          </div>\n          <div className=\"progress\">\n            <div\n              className=\"progress__bar\"\n              style={progressBarStyles}\n            />\n          </div>\n        </div>\n        <div className=\"background\" style={backgroundStyles} />{\" \"}\n      </div>\n    </div>\n  );\n}\nexport default Player;","import React from 'react';\nimport axios from 'axios';\n// import * as os from 'os';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync } from '@fortawesome/free-solid-svg-icons'\n//import {geolocated} from \"react-geolocated\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Player from \"./Player\";\nimport './App.css';\n\nconst spotifyApi = new SpotifyWebApi();\n\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\n// Replace with your app's client ID, redirect URI and desired scopes\n// const clientId = os.environ['spotify_client_id'];\nconst clientId = '45eecc039efd45ad9b8e183c653e2885';\nconst redirectUri = \"http://localhost:8000/\";\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"user-read-private\",\n  \"user-read-email\",\n  \"user-top-read\",\n  'playlist-modify-public',\n];\n// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nconsole.log(hash)\nconst token = hash.access_token;\nif (token) {\n  spotifyApi.setAccessToken(token);\n  console.log('access token set!')\n}\nwindow.location.hash = \"\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms:0,\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      top_artists: [],\n    };\n  \n    // const params = this.getHashParams();\n    // const token = params.access_token;\n    // if (token) {\n    //   spotifyApi.setAccessToken(token);\n    // }\n    // this.state = {\n    //   loggedIn: token ? true : false,\n    //   nowPlaying: {\n    //     name: 'not checked',\n    //     image: ''\n    //   },\n    //   topArtists: [],\n    //   topArtistEvents: [],\n      // coords: {\n      //   latitude,\n      //   longitude,\n      //   altitude,\n      //   accuracy,\n      //   altitudeAccuracy,\n      //   heading,\n      //   speed,\n      // }\n    // }\n\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n\n\n  getCurrentlyPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((data) => {\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n        });\n        console.log(data)\n      })\n      .catch(error => {\n        console.log(error)\n        console.log(this.state)      \n      })\n  }\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n    }\n    this.getCurrentlyPlaying()\n  }\n\n  getTopArtists() {\n    spotifyApi.getMyTopArtists()\n    // .then((response) => console.log(response))\n    .then((response) => {\n      this.setState({\n        top_artists: response.items.map(artist => artist.name)\n      })\n    })\n  }\n\n  // getMyLocation() {\n  //     if (navigator.geolocation) {\n  //         navigator.geolocation.getCurrentPosition(showPosition, showError);\n  //     } else {\n  //         var x = document.getElementById(\"location\");\n  //         x.innerHTML = \"Geolocation is not supported by this browser.\";\n  //     }\n  // }\n\n//   showPosition(position) {\n//     var x = document.getElementById(\"location\");\n//     x.innerHTML = \"Latitude: \" + position.coords.latitude + \n//     \"<br>Longitude: \" + position.coords.longitude; \n//     var latlon = position.coords.latitude + \",\" + position.coords.longitude;\n\n\n//     $.ajax({\n//       type:\"GET\",\n//       url:\"https://app.ticketmaster.com/discovery/v2/events.json?apikey=pLOeuGq2JL05uEGrZG7DuGWu6sh2OnMz&latlong=\"+latlon,\n//       async:true,\n//       dataType: \"json\",\n//       success: function(json) {\n//                   console.log(json);\n//                   var e = document.getElementById(\"events\");\n//                   e.innerHTML = json.page.totalElements + \" events found.\";\n//                   showEvents(json);\n//                   initMap(position, json);\n//                },\n//       error: function(xhr, status, err) {\n//                   console.log(err);\n//                }\n//     });\n\n// }\n\n  // getTopArtistEvents() {\n  //   fetch(\"https://rest.bandsintown.com/artists/\"\n  //     + this.state.topArtists[1].split(' ').join('%20') \n  //     + '/events?app_id=6a4c5bcaef444a66f8ca08be6adb9be8')\n  //     .then(res => res.json())\n  //     .then(\n  //       (data) => {\n  //         console.log(data)\n  //         this.setState({\n  //           isLoaded: true,\n  //           topArtistEvents: data.map(event => [event.lineup[0],'will be playing at',event.venue.name, 'in', event.venue.city, ',', event.venue.region, 'at', event.datetime].join())\n  //         });\n  //       },\n  //       // Note: it's important to handle errors here\n  //       // instead of a catch() block so that we don't swallow\n  //       // exceptions from actual bugs in components.\n  //       (error) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           error\n  //         });\n  //       }\n  //     )\n  // }\n\n//   render() {\n\n//     return (\n//       <>\n\n//       {/* <button onClick={() => this.spotifyLogin()}>Log in to Spotify</button>\n//       <button onClick={() => this.getNowPlaying()}>get now playing</button>\n//       <div>{this.state.nowPlaying.name}:</div>\n//       <div>\n//         <img src={this.state.nowPlaying.image} style={{width: 100}}></img>\n//       </div> */}\n// {/* \n//       <button onClick={() => this.getTopArtists()}>get top artists</button>\n//       <div>{this.state.topArtists}</div>\n\n//       <button onClick={() => this.getTopArtistEvents()}> get top artist events </button>\n//       <div>{this.state.topArtistEvents}</div>\n\n//       <button onClick={() => this.getMyLocation()}>get user location</button>\n\n//       <div></div> */}\n//       </>\n//   )};\n// }\n\nrender() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <nav><ul>\n        </ul></nav>\n      {!this.state.token && (\n        <a\n          className=\"btn btn--loginApp-link\"\n          href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}\n        >\n          Login to Spotify\n        </a>\n      )}\n      <div className='player-wrapper'>\n        {this.state.token && (\n          <Player\n            item={this.state.item}\n            is_playing={this.state.is_playing}\n            progress_ms={this.state.progress_ms}\n          />\n        )}\n        {this.state.token && (\n          <button className='btn p-1 refresh-btn' onClick={() => this.getCurrentlyPlaying()}><span className=\"p-1\"><FontAwesomeIcon icon={faSync} /></span></button>\n        )}\n      </div>\n      <br/>\n      <br/>\n      <br/>\n      <button onClick={() => this.getTopArtists()}>get top artists</button>\n      <div>{this.state.top_artists}</div>\n\n      </header>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}