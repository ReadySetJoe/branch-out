{"version":3,"sources":["Player.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","backgroundStyles","backgroundImage","item","album","images","url","progressBarStyles","width","progress_ms","duration_ms","className","alt","src","name","artists","is_playing","style","axios","defaults","xsrfCookieName","xsrfHeaderName","spotifyApi","SpotifyWebApi","scopes","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","token","access_token","setAccessToken","console","log","App","state","top_artists","selected_top_artists","use_currently_playing","songs","events","getCurrentlyPlaying","bind","getTopArtists","addNowPlayingToList","_token","this","setState","getMyCurrentPlaybackState","then","data","post","catch","error","getMyTopArtists","items","map","artist","err","formData","FormData","append","href","length","localStorage","setItem","headers","join","onClick","icon","faSync","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e08c97e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Player.css\";\nconst Player = props => {\n  const backgroundStyles = {\n    backgroundImage:`url(${props.item.album.images[0].url})`,\n  };\n  \n  const progressBarStyles = {\n    width: (props.progress_ms * 100 / props.item.duration_ms) + '%'\n  };\n  \n  return (\n    <div className=\"App\">\n      <div className=\"main-wrapper\">\n        <div className=\"now-playing__img\">\n          <img alt=\"Album art for now playing\" src={props.item.album.images[0].url} />\n        </div>\n        <div className=\"now-playing__side\">\n          <div className=\"now-playing__name\">\n            {props.item.name}\n          </div>\n          <div className=\"now-playing__artist\">\n            {props.item.artists[0].name}\n          </div>\n          <div className=\"now-playing__status\">\n            {props.is_playing ? \"Playing\" : \"Paused\"}\n          </div>\n          <div className=\"progress\">\n            <div\n              className=\"progress__bar\"\n              style={progressBarStyles}\n            />\n          </div>\n        </div>\n        <div className=\"background\" style={backgroundStyles} />{\" \"}\n      </div>\n    </div>\n  );\n}\nexport default Player;","import React from 'react';\nimport axios from 'axios';\n// import * as os from 'os';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync } from '@fortawesome/free-solid-svg-icons'\n//import {geolocated} from \"react-geolocated\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Player from \"./Player\";\nimport './App.css';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nconst spotifyApi = new SpotifyWebApi();\n\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\n// Replace with your app's client ID, redirect URI and desired scopes\n// const clientId = os.environ['spotify_client_id'];\nconst clientId = '45eecc039efd45ad9b8e183c653e2885';\nconst redirectUri = \"http://localhost:3000/\";\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"user-read-private\",\n  \"user-read-email\",\n  \"user-top-read\",\n  'playlist-modify-public',\n];\n// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nconst token = hash.access_token;\nif (token) {\n  spotifyApi.setAccessToken(token);\n  console.log(token)\n  // axios.post('/api/v1/rest-auth/login/')\n}\nwindow.location.hash = \"\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      \n      // Now Playing\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms:0,\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n\n      // Artist Selection\n      top_artists: [],\n      selected_top_artists: [],\n      use_currently_playing: true,\n\n      // Limb\n      // Songs\n      songs: [],\n\n      // Events\n      events: [],\n\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.getTopArtists = this.getTopArtists.bind(this);\n    this.addNowPlayingToList = this.addNowPlayingToList.bind(this);\n  }\n\n  componentDidMount() {\n\n    let _token = hash.access_token;\n    if (_token) {\n      this.setState({\n        token: _token\n      });\n    }\n    this.getCurrentlyPlaying()\n    this.getTopArtists()\n  }\n\n//   spotifyLogin() {\n//     axios.get('social/login/spotify/',\n//     href={`${authEndpoint}\n//     ?client_id=${clientId}\n//     &redirect_uri=${redirectUri}&scope=\n//     ${scopes.join(\"%20\")}\n//     &response_type=token\n//     &show_dialog=true`}\n// )\n//   }\n\n  getCurrentlyPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n    .then(data => {\n      this.setState({\n        item: data.item,\n        is_playing: data.is_playing,\n        progress_ms: data.progress_ms,\n      });\n      console.log(data)\n      axios.post()\n    })\n    .catch(error => {\n      console.log(error)    \n    })\n  }\n\n  getTopArtists() {\n    spotifyApi.getMyTopArtists()\n    .then(data => {\n      this.setState({\n        top_artists: data.items.map(artist => artist.name)\n      })\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }\n\n  addNowPlayingToList() {\n    let formData = new FormData();\n    formData.append('title', this.state.item.name);\n    formData.append('artist', this.state.item.album.images[0].url);\n    formData.append('url', this.state.item.href);\n    formData.append('track_number', this.state.songs.length);\n    formData.append('duration_ms', this.state.item.duration_ms);\n    localStorage.setItem('formData',formData)\n    console.log(formData)\n\n    axios.post('/api/v1/songs/', formData, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    })\n    .then(() => {\n      console.log('Current song added to song list!')\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }\n\n  // getTopArtistEvents() {\n  //   fetch(\"https://rest.bandsintown.com/artists/\"\n  //     + this.state.topArtists[1].split(' ').join('%20') \n  //     + '/events?app_id=6a4c5bcaef444a66f8ca08be6adb9be8')\n  //     .then(res => res.json())\n  //     .then(\n  //       (data) => {\n  //         console.log(data)\n  //         this.setState({\n  //           isLoaded: true,\n  //           topArtistEvents: data.map(event => [event.lineup[0],'will be playing at',event.venue.name, 'in', event.venue.city, ',', event.venue.region, 'at', event.datetime].join())\n  //         });\n  //       },\n  //       // Note: it's important to handle errors here\n  //       // instead of a catch() block so that we don't swallow\n  //       // exceptions from actual bugs in components.\n  //       (error) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           error\n  //         });\n  //       }\n  //     )\n  // }\n\nrender() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <nav><ul>\n        </ul></nav>\n      {!this.state.token && (\n        <div>\n          <a\n          className=\"btn btn--loginApp-link\"\n          href=\"/social/login/spotify/\"\n          >\n          Login to Spotify (Authorization Code)\n          </a>\n          <a\n          className=\"btn btn--loginApp-link\"\n          href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}\n          >\n          Login to Spotify (Implicit Grant)\n          </a>\n        </div>\n      )}\n      <div className='player-wrapper'>\n        {this.state.token && (\n          <Player\n            item={this.state.item}\n            is_playing={this.state.is_playing}\n            progress_ms={this.state.progress_ms}\n          />\n        )}\n        {this.state.token && (\n          <button className='btn p-1 refresh-btn' onClick={() => this.getCurrentlyPlaying()}><span className=\"p-1\"><FontAwesomeIcon icon={faSync} /></span></button>\n        )}\n      </div>\n      <br/>\n      <br/>\n      <br/>\n      <button onClick={() => this.addNowPlayingToList()}>Use This Artist</button>\n\n      <button onClick={() => this.getTopArtists()}>Use Top Artists</button>\n      <div>{this.state.top_artists}</div>\n\n      </header>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}