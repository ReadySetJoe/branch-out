{"version":3,"sources":["Player.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","backgroundStyles","backgroundImage","item","album","images","url","progressBarStyles","width","progress_ms","duration_ms","className","alt","src","name","artists","is_playing","style","axios","defaults","xsrfCookieName","xsrfHeaderName","spotifyApi","SpotifyWebApi","scopes","App","state","token","id","root_artists","root_artists_selected","use_currently_playing","use_top_artists","root_artists_selection_complete","songs","events","getNowPlaying","bind","useTopArtists","useNowPlaying","addNowPlayingToList","selectArtist","_token","this","get","then","res","data","extra_data","access_token","setState","setAccessToken","catch","err","console","log","getMyCurrentPlaybackState","error","getArtistRelatedArtists","getMyTopArtists","items","formData","FormData","append","href","length","localStorage","setItem","JSON","stringify","method","config","headers","artist","includes","_selected","splice","indexOf","push","map","onClick","join","icon","faSync","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13d43c44.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Player.css\";\nconst Player = props => {\n  const backgroundStyles = {\n    backgroundImage:`url(${props.item.album.images[0].url})`,\n  };\n  \n  const progressBarStyles = {\n    width: (props.progress_ms * 100 / props.item.duration_ms) + '%'\n  };\n  \n  return (\n    <div className=\"App\">\n      <div className=\"main-wrapper\">\n        <div className=\"now-playing__img\">\n          <img alt=\"Album art for now playing\" src={props.item.album.images[0].url} />\n        </div>\n        <div className=\"now-playing__side\">\n          <div className=\"now-playing__name\">\n            {props.item.name}\n          </div>\n          <div className=\"now-playing__artist\">\n            {props.item.artists[0].name}\n          </div>\n          <div className=\"now-playing__status\">\n            {props.is_playing ? \"Playing\" : \"Paused\"}\n          </div>\n          <div className=\"progress\">\n            <div\n              className=\"progress__bar\"\n              style={progressBarStyles}\n            />\n          </div>\n        </div>\n        <div className=\"background\" style={backgroundStyles} />{\" \"}\n      </div>\n    </div>\n  );\n}\nexport default Player;","import React from 'react';\nimport axios from 'axios';\n// import * as os from 'os';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync } from '@fortawesome/free-solid-svg-icons'\n//import {geolocated} from \"react-geolocated\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Player from \"./Player\";\nimport './App.css';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nconst spotifyApi = new SpotifyWebApi();\n\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\n// Replace with your app's client ID, redirect URI and desired scopes\n// const clientId = os.environ['spotify_client_id'];\nconst clientId = '45eecc039efd45ad9b8e183c653e2885';\nconst redirectUri = \"http://localhost:8000/\";\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"user-read-private\",\n  \"user-read-email\",\n  \"user-top-read\",\n  'playlist-modify-public',\n];\n// Get the hash of the url\n// const hash = window.location.hash\n//   .substring(1)\n//   .split(\"&\")\n//   .reduce(function(initial, item) {\n//     if (item) {\n//       var parts = item.split(\"=\");\n//       initial[parts[0]] = decodeURIComponent(parts[1]);\n//     }\n//     return initial;\n//   }, {});\n// const token = hash.access_token;\n// if (token) {\n//   spotifyApi.setAccessToken(token);\n//   console.log(token)\n// }\n// window.location.hash = \"\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      \n      // Now Playing\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" , id: \"\"}],\n        duration_ms:0,\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n\n      // Artist Selection\n      root_artists: [],\n      root_artists_selected: [],\n      use_currently_playing: false,\n      use_top_artists: false,\n      root_artists_selection_complete: false,\n\n      // Limb\n      // Songs\n      songs: [],\n\n      // Events\n      events: [],\n\n    };\n    this.getNowPlaying = this.getNowPlaying.bind(this);\n    this.useTopArtists = this.useTopArtists.bind(this);\n    this.useNowPlaying = this.useNowPlaying.bind(this);\n    this.addNowPlayingToList = this.addNowPlayingToList.bind(this);\n    this.selectArtist = this.selectArtist.bind(this);\n  }\n\n  componentDidMount() {    \n    if (!this.state.token) {\n      let _token\n      axios.get('/api/v1/user-social-auth/')\n      .then(res => {\n        // console.log(res)\n        // localStorage.setItem('res_token', JSON.stringify(res))\n        _token = res.data[0].extra_data.access_token\n        this.setState({\n          token: _token\n        });\n        spotifyApi.setAccessToken(_token)\n        this.getNowPlaying()\n      })\n      .catch(err => {\n        console.log(err)\n      })\n    }\n  }\n\n  getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n    .then(data => {\n      this.setState({\n        item: data.item,\n        is_playing: data.is_playing,\n        progress_ms: data.progress_ms,\n      });\n      console.log(data)\n    })\n    .catch(error => {\n      console.log(error)    \n    })\n  }\n\n  useNowPlaying() {\n    spotifyApi.getArtistRelatedArtists(this.state.item.artists[0].id)\n    .then(data => {\n      this.setState({\n        root_artists: data.artists,\n        use_currently_playing: true, \n        use_top_artists: false\n      })\n      console.log(data)\n    })\n    .catch(err => console.log(err))\n  }\n\n  useTopArtists() {\n    spotifyApi.getMyTopArtists()\n    .then(data => {\n      this.setState({\n        root_artists: data.items,\n        use_top_artists: true, \n        use_currently_playing: false\n      })\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }\n\n  addNowPlayingToList() {\n    let formData = new FormData();\n    formData.append('title', this.state.item.name);\n    formData.append('artist', this.state.item.artists[0].name);\n    formData.append('url', this.state.item.href);\n    formData.append('track_number', this.state.songs.length);\n    formData.append('duration_ms', this.state.item.duration_ms);\n    localStorage.setItem('formData',JSON.stringify(formData))\n    localStorage.setItem('state-addnowplaying',JSON.stringify(this.state))\n    console.log(formData)\n\n    axios({\n      method: 'post',\n      url: '/api/v1/songs/',\n      config: {headers: {'content-type': 'multipart/form-data'}},\n      data: formData,\n    })\n    .then(() => {\n      console.log('Current song added to song list!')\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }\n\n  selectArtist(artist) {\n    if (!this.state.root_artists_selected.includes(artist)) {\n      let _selected = [...this.state.root_artists_selected]\n      _selected.push(artist)\n      this.setState({root_artists_selected: _selected})\n    } else {\n      let _selected = [...this.state.root_artists_selected]\n      _selected.splice(_selected.indexOf(artist), 1)\n      this.setState({root_artists_selected: _selected})\n    }\n  }\n\n  // getTopArtistEvents() {\n  //   fetch(\"https://rest.bandsintown.com/artists/\"\n  //     + this.state.topArtists[1].split(' ').join('%20') \n  //     + '/events?app_id=6a4c5bcaef444a66f8ca08be6adb9be8')\n  //     .then(res => res.json())\n  //     .then(\n  //       (data) => {\n  //         console.log(data)\n  //         this.setState({\n  //           isLoaded: true,\n  //           topArtistEvents: data.map(event => [event.lineup[0],'will be playing at',event.venue.name, 'in', event.venue.city, ',', event.venue.region, 'at', event.datetime].join())\n  //         });\n  //       },\n  //       // Note: it's important to handle errors here\n  //       // instead of a catch() block so that we don't swallow\n  //       // exceptions from actual bugs in components.\n  //       (error) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           error\n  //         });\n  //       }\n  //     )\n  // }\n\nrender() {\n  let root_artists = this.state.root_artists.map(artist => \n    <button \n    className={`btn root-artist-btn ${this.state.root_artists_selected.includes(artist) ? ('btn-selected') : ('')}`}\n    onClick={() => this.selectArtist(artist)}\n    >\n    {artist.name}\n    </button>\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <nav className=\"scrollspy-placeholder\"><ul></ul></nav>\n      {!this.state.token && (\n        <div>\n          <a\n          className=\"btn btn--loginApp-link\"\n          href=\"/social/login/spotify/\"\n          >\n          Login to Spotify (Authorization Code)\n          </a>\n          <a\n          className=\"btn btn--loginApp-link\"\n          href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}\n          >\n          Login to Spotify (Implicit Grant)\n          </a>\n        </div>\n      )}\n      {this.state.token && (\n        <div>\n          <div className='player-wrapper'>\n          \n            <Player\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.state.progress_ms}\n            />\n            <button className='btn p-1 refresh-btn' onClick={() => this.getNowPlaying()}><span className=\"p-1\"><FontAwesomeIcon icon={faSync} /></span></button>\n            \n          </div>\n          <br/>\n          <br/>\n          <br/>\n          <button className={`btn ${this.state.use_currently_playing ? 'btn-selected' : ''} `} onClick={() => this.useNowPlaying()}>Use Artists Related to Now Playing</button>\n          <button className={`btn ${this.state.use_top_artists ? 'btn-selected' : ''} `} onClick={() => this.useTopArtists()}>Use Your Top Artists</button>\n        </div>\n      )}\n\n      \n      <br/>\n      <br/>\n      <br/>\n\n      <div>{root_artists}</div>\n\n      <br/>\n      <br/>\n      <br/>\n\n      <div className={`${this.state.use_currently_playing || this.state.use_top_artists ? 'd-flex' : 'd-none'} `}>\n        <h2 >Select at least 3 starting bands to continue</h2>\n        <button \n        onClick={() => \n          {if (this.state.root_artists_selected.length >= 3) {\n          this.setState({root_artists_selection_complete: true})\n          }} \n        }\n        className={`${this.state.root_artists_selected.length >= 3 ? 'btn' : 'btn-disabled'}`}\n        >Continue Using These Bands</button> \n      </div>\n\n\n      \n      \n      </header>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}